default_platform(:ios)

platform :ios do

    desc "Fetch dependencies"
    lane :prepare do |options|
        carthage(
            command: "bootstrap",
            platform: "iOS",
            new_resolver: true 
        )
    end

    desc "Build framework for testing"
    lane :build do | options |
        scan(
            build_for_testing: true,
            devices: ["iPhone 8"],
            code_coverage: true,
            derived_data_path: "DerivedData",
            buildlog_path: "build",
            output_directory: "build",
            output_types: "junit"
        )
    end

    desc "Test framework without building"
    lane :test do
        scan(
            test_without_building: true,
            devices: ["iPhone 8"],
            code_coverage: true,
            derived_data_path: "DerivedData",
            buildlog_path: "test",
            output_directory: "test",
            output_types: "junit",
            fail_build: false
        )
        to_retry = failing_testsuites("../test/report.junit")

        unless to_retry.length == 0
            UI.important "Some tests failed, retrying to see if they will pass"
            scan(
                test_without_building: true,
                devices: ["iPhone 8"],
                code_coverage: false,
                derived_data_path: "DerivedData",
                only_testing: to_retry,
                fail_build: true
            )
        end
    end

    desc "Run post-test tasks"
    lane :post_test do
        config = Config.read_current()
        sh "curl -s https://codecov.io/bash > codecov"
        sh "chmod +x codecov"
        codecov = "./codecov -J '^#{config.framework}$' -D ../DerivedData"

        if ENV["BUILD_REASON"] == "PullRequest"
            if ENV["CODECOV_TOKEN"].nil?
                UI.user_error! "codecov.io token missing for current repository. Set it in CODECOV_TOKEN environment variable"
            end

            if ENV["BUILD_SOURCEBRANCH"].nil?
                UI.user_error! "Source branch env variable missing. Set BUILD_SOURCEBRANCH to fix it"
            end

            pull_request_number = ENV["BUILD_SOURCEBRANCH"].split("/")[2] # For PRs the branch is in format "refs/pull/1/merge"

            codecov << " -t #{ENV["CODECOV_TOKEN"]} -P #{pull_request_number}"
        end

        sh codecov
    end
end 

# Return an array of test classes that have failures from junit file
def failing_testsuites(junit)
    testsuites = []
    testsuite = ""

    File.foreach(junit) do |line|
        # Should match WireSyncEngine-iOS-Tests in <testsuites name='WireSyncEngine-iOS-Tests.xctest' tests='23' failures='1'>
        testsuite_match = line.match /^\s*<testsuites name='(?<testsuite>.+)\.xctest/
        if !testsuite_match.nil? && testsuite_match.captures.count == 1 && !testsuite_match[:testsuite].nil?
            testsuite = testsuite_match[:testsuite]
        end

        # Should match 
        #   AccountStatusTests and 1 in <testsuite name='WireSyncEngine_iOS_Tests.AccountStatusTests' tests='6' failures='1'>
        #   AND
        #   ZMDefinesTest and 1 in <testsuite name='ZMDefinesTest' tests='12' failures='1'>

        testcase_match = line.match /^\s*<testsuite name='(.+\.)*(?<testclass>.+)' tests='\d+' failures='(?<failures>\d+)'/
        if !testcase_match.nil? && testcase_match.captures.count == 2 && Integer(testcase_match[:failures]) > 0
            testclass = testcase_match[:testclass]
            result = "#{testsuite}/#{testclass}"
            testsuites.push(result)  
        end

    end

    return testsuites
end

class Config

    attr_reader :framework
    attr_reader :repository
    attr_reader :organization

    CONFIG_FILE_PATH = "../Scripts/config.txt"

    def full_repo
        "#{organization}/#{repository}"
    end

    def initialize(values)
        @framework = values["framework"]
        @repository = values["repository"]
        @organization = values["organization"]
        @release_name_format = values["release-name-format"]
    end

    def self.read_current
        values = {}
        File.readlines(CONFIG_FILE_PATH).each do |line|
            next if line.chomp.empty?
            items = line.split("=")
            unless items.count == 2 
                UI.user_error! "Malformed config in #{CONFIG_FILE_PATH}"
            end
            values[items[0]] = items[1].strip()
        end
        Config.new(values)
    end
end
